$date
	Sat Oct  5 14:56:34 2024
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module part_5_top_tb $end
$var wire 32 ! sum [31:0] $end
$var reg 32 " a [31:0] $end
$var reg 32 # b [31:0] $end
$var reg 1 $ sub $end
$scope module top0 $end
$var wire 32 % a [31:0] $end
$var wire 32 & b [31:0] $end
$var wire 1 $ sub $end
$var wire 32 ' xorb [31:0] $end
$var wire 32 ( sum [31:0] $end
$scope module adder0 $end
$var wire 32 ) a [31:0] $end
$var wire 32 * b [31:0] $end
$var wire 32 + sum [31:0] $end
$var wire 16 , sum_high_1 [31:16] $end
$var wire 16 - sum_high_0 [31:16] $end
$var wire 32 . res [31:0] $end
$var wire 1 / carry $end
$scope module add16_1 $end
$var wire 16 0 a [15:0] $end
$var wire 16 1 b [15:0] $end
$var wire 1 2 cin $end
$var wire 16 3 sum [15:0] $end
$var wire 1 / cout $end
$upscope $end
$scope module add16_2 $end
$var wire 16 4 a [15:0] $end
$var wire 16 5 b [15:0] $end
$var wire 1 6 cin $end
$var wire 16 7 sum [15:0] $end
$var wire 1 8 cout $end
$upscope $end
$scope module add16_3 $end
$var wire 16 9 a [15:0] $end
$var wire 16 : b [15:0] $end
$var wire 1 ; cin $end
$var wire 16 < sum [15:0] $end
$var wire 1 = cout $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0=
b1 <
1;
b0 :
b0 9
08
b0 7
06
b0 5
b0 4
b0 3
02
b0 1
b0 0
0/
b0 .
b0 -
b1 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
0$
b0 #
b0 "
b0 !
$end
#50
b1 !
b1 (
b1 +
b1 .
b1 3
b1 0
b1 "
b1 %
b1 )
#100
b10 !
b10 (
b10 +
b10 .
b10 3
b10 0
b10 "
b10 %
b10 )
#150
b0 !
b0 (
b0 +
b0 .
b0 3
1/
b1111111111111111 -
b1111111111111111 7
b0 ,
b0 <
1=
b1111111111111110 1
b1111111111111111 5
b1111111111111111 :
b11111111111111111111111111111110 '
b11111111111111111111111111111110 *
1$
b1 #
b1 &
#200
b11111111111111111111111111111111 !
b11111111111111111111111111111111 (
b11111111111111111111111111111111 +
b11111111111111111111111111111111 .
b1111111111111111 3
0/
b1111111111111101 1
b11111111111111111111111111111101 '
b11111111111111111111111111111101 *
b10 #
b10 &
#250
b0 -
b0 7
b1 ,
b1 <
0=
b1 1
b0 5
b0 :
b10000000000000000 !
b10000000000000000 (
b10000000000000000 +
b10000000000000000 .
b0 3
1/
b1 '
b1 *
b1111111111111111 0
0$
b1 #
b1 &
b1111111111111111 "
b1111111111111111 %
b1111111111111111 )
#300
18
1=
b1111111111111110 1
b1111111111111111 5
b1111111111111111 :
b1111111111111110 !
b1111111111111110 (
b1111111111111110 +
b1111111111111110 .
b1111111111111110 3
0/
b0 -
b0 7
b1 ,
b1 <
b11111111111111111111111111111110 '
b11111111111111111111111111111110 *
b0 0
b1 4
b1 9
1$
b10000000000000000 "
b10000000000000000 %
b10000000000000000 )
#350
b1111111111111111 1
b11111111111111111111111111111110 !
b11111111111111111111111111111110 (
b11111111111111111111111111111110 +
b11111111111111111111111111111110 .
b1111111111111110 3
1/
b1111111111111110 -
b1111111111111110 7
b1111111111111111 ,
b1111111111111111 <
b11111111111111111111111111111111 '
b11111111111111111111111111111111 *
b1111111111111111 0
b1111111111111111 4
b1111111111111111 9
0$
b11111111111111111111111111111111 #
b11111111111111111111111111111111 &
b11111111111111111111111111111111 "
b11111111111111111111111111111111 %
b11111111111111111111111111111111 )
#400
